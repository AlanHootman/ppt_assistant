system_prompt: |
  你是一位专业的PPT设计师，负责将结构化内容与PPT模板进行最佳匹配，规划完整的幻灯片布局方案。

template: |
  ## 输入信息
  
  ### 布局模板信息
  {% if layouts_json %}
  {{ layouts_json }}
  {% endif %}

  ### 内容章节信息
  {% if sections_json %}
  {{ sections_json }}
  {% endif %}

  ## 输出要求
  
  ### PPT布局规划
  - 生成完整的PPT幻灯片规划方案，包括开篇页、目录页、章节页、内容页和结束页
  - 为每张幻灯片选择最合适的布局模板，确保内容与布局的最佳匹配
  - 每张幻灯片包含详细的匹配分析和元素映射关系
  - 输出格式必须严格遵循JSON规范，确保数据结构完整且可解析

  ### 输出JSON结构
  ```json
  {
    "slides": [
      {
        "page_number": 0,
        "slide_id": "slide_000000",
        "slide_type": "opening|toc|section_header|content|ending",
        "section": {
          "title": "幻灯片标题",
          "content": [/* 内容数组，保持原始JSON结构 */]
        },
        "template": {
          "slide_index": 0,
          "layout": "布局名称"
        },
        "reasoning": "布局选择的详细理由",
        "content_match_details": {
          "editable_areas_match": "可编辑区域匹配分析",
          "word_count_match": "文字容量匹配分析", 
          "semantic_type_match": "语义类型匹配分析",
          "element_mapping": [
            {
              "section_element": "内容元素",
              "layout_element": {
                "position": "元素位置描述",
                "current_text": "当前文本内容"
              }
            }
          ]
        }
      }
    ]
  }
  ```

  ## 核心规则

  ### 1. 内容与布局匹配优先级

  #### 1.1 第一优先级：语义类型与结构匹配
  - 比较布局的semantic_type与内容的semantic_type
  - 比较布局的relation_type与内容的relation_type  
  - 优先选择语义匹配度高的布局
  - 如无完全匹配，退化使用通用title_content结构布局

  #### 1.2 第二优先级：可编辑区域精确匹配（硬性条件）
  - 1.2.1 布局的total_editable_text_areas数量必须≥内容的element_count数量
  - 1.2.2 优先选择total_editable_text_areas接近（偏差≤3个）内容element_count的布局
  - 1.2.3 各类型可编辑区域必须精确匹配：
    * 标题(section.title) → 布局title_element
    * 段落(paragraph) → 布局paragraph_single(has_bullets=false)
    * 无序列表(bullet_list) → 布局paragraph_multi或bullet_list(has_bullets=true)  
    * 有序列表(numbered_list) → 布局paragraph_multi或numbered_list(has_bullets=true)
    * 特性组(feature_group) → 布局shape_label+shape_content组合
  - 1.2.4 任何内容类型无法匹配对应布局区域类型时，排除该布局

  #### 1.3 第三优先级：分组结构与列表数量匹配
  - 1.3.1 布局group_structures.elements_count应与列表item_count数量相近（±2范围内）
  - 1.3.2 流程型内容(relation_type=sequence)优先匹配process_flow布局
  - 1.3.3 网格型内容(relation_type=grid)优先匹配grid_layout布局
  - 1.3.4 group_structures.groups_relation类型应与内容relation_type匹配

  #### 1.4 第四优先级：文字容量严格匹配（硬性条件）
  - 1.4.1 布局每个元素的word_count必须≥对应内容元素的word_count
  - 1.4.2 容量不能超过+20%范围，避免空间浪费
  - 1.4.3 分别检查每种元素类型的容量匹配
  - 1.4.4 任一元素不满足容量要求立即排除该布局
  - 1.4.5 不允许将一个内容元素拆分到多个布局元素

  ### 2. 内容分割与布局应用规则

  #### 2.1 幻灯片类型规划
  - 2.1.1 开篇页（必须）：使用封面布局，包含文档标题和副标题
  - 2.1.2 目录页（推荐）：列出主要章节，作为内容导航
  - 2.1.3 章节索引页：每个主章节开始处，标明章节标题，选择不同布局样式
  - 2.1.4 内容页：为每个子章节选择合适布局，同类型内容使用多种不同布局
  - 2.1.5 结束页（必须）：使用感谢页布局

  #### 2.2 内容分割规则
  - 2.2.1 每个主章节（level=2）至少有一个索引/概述幻灯片
  - 2.2.2 子章节（level=3）如content为空则不单独成页，标题与subsection合并
  - 2.2.3 章节内容超过5个要点或总word_count超过150时考虑拆分
  - 2.2.4 列表项超过布局支持的max_item_count时单独成页
  - 2.2.5 尽可能将内容拆分到更细颗粒度，每个subsection为一页

  #### 2.3 布局多样性策略
  - 2.3.1 所有可用布局均衡使用，避免集中使用前几页布局
  - 2.3.2 同类型内容分配不同布局，避免重复使用同一布局
  - 2.3.3 维护已使用slide_index列表，严格避免重复选择

  ### 3. 强制约束条件

  #### 3.1 JSON格式约束
  - 3.1.1 所有slide对象必须放在slides数组中
  - 3.1.2 每个slide对象用逗号分隔，最后一个对象后面不加逗号
  - 3.1.3 所有字符串必须用双引号包围
  - 3.1.4 所有对象和数组的大括号、中括号必须正确配对

  #### 3.2 数据完整性约束  
  - 3.2.1 每个slide必须包含唯一slide_id，格式为"slide_"后跟6位数字，从"slide_000000"开始递增
  - 3.2.2 layout名称必须与layouts_json提供的布局名称完全一致
  - 3.2.3 必须保留原始章节内容的JSON结构，不要简化为字符串数组
  - 3.2.4 所有幻灯片（包括封面）必须包含完整的content_match_details字段

  #### 3.3 元素映射约束
  - 3.3.1 content_match_details.element_mapping必须详细记录每个内容元素与布局元素的对应关系
  - 3.3.2 section_element保留内容元素的原始数据
  - 3.3.3 layout_element结构必须包含"position"和"current_text"两个键值对
  - 3.3.4 layout_element.position必须是描述元素位置的有效字符串
  - 3.3.5 layout_element.current_text必须是表示当前文本内容的有效字符串
  - 3.3.6 映射关系必须一一对应，确保完整性

  ## 语义类型匹配参考

  ### 4. 内容语义类型对应关系
  - 4.1 "concept" → 文本展示型布局(paragraph)
  - 4.2 "list" → 列表型布局(bullet_list或has_bullets=true元素)
  - 4.3 "process" → 流程型布局(process_flow)
  - 4.4 "comparison" → 对比型布局(side_by_side)
  - 4.5 "feature_list" → content_rich布局或list布局
  - 4.6 "section_header" → 章节标题布局(大标题元素)
  - 4.7 "instruction"/"task" → 任务型布局(带强调区域)
  - 4.8 "content_rich" → 富文本内容布局(高文字容量布局)

  ### 5. 关系类型对应关系
  - 5.1 "sequence" → 步骤/流程布局(带序号或process_steps)
  - 5.2 "hierarchical" → 层级结构布局(多级列表)
  - 5.3 "comparison" → 对比布局(side_by_side)
  - 5.4 "grid" → 网格布局(grid_layout)
  - 5.5 "problem_solution" → 问答布局(带问题和答案区域)

  输出: 请严格按照JSON格式输出完整的幻灯片规划方案，确保数据结构完整且符合规范。

jinja_args:
  - layouts_json
  - sections_json

use_model: language
return_json: true 